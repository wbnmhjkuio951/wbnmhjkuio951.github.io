<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>J先生的博客</title>
  
  <subtitle>wjianghongs465@sina.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jhs1996.cn/"/>
  <updated>2019-09-26T08:49:05.787Z</updated>
  <id>http://www.jhs1996.cn/</id>
  
  <author>
    <name>JHS-1886</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue总结</title>
    <link href="http://www.jhs1996.cn/2019/09/26/vue/"/>
    <id>http://www.jhs1996.cn/2019/09/26/vue/</id>
    <published>2019-09-26T08:56:05.324Z</published>
    <updated>2019-09-26T08:49:05.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><p>总结了大部分的vue知识点<a id="more"></a></p><h2 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate()&#123;</span><br><span class="line">    //实例刚从内存中被创建出来，此时还没有初始化data和methods属性</span><br><span class="line">    console.log(&apos;1.初始化之前:beforeCreate&apos;)</span><br><span class="line">    console.log(&apos;当前实例的数据data&apos;,this.$data)</span><br><span class="line">    console.log(&apos;当前实例的根元素&apos;,this.$el)</span><br><span class="line">    console.log(&apos;===============&apos;)</span><br><span class="line">&#125;,</span><br><span class="line">created()&#123;</span><br><span class="line">    //实例在内存中已经创建好，data和methods创建ok   此时还没有开始编译模板</span><br><span class="line">    console.log(&apos;2.创建完成:created&apos;)</span><br><span class="line">    console.log(&apos;当前实例的数据data&apos;,this.$data)</span><br><span class="line">    console.log(&apos;当前实例的根元素&apos;,this.$el)</span><br><span class="line">    console.log(&apos;===============&apos;)</span><br><span class="line">&#125;,</span><br><span class="line">beforeMount()&#123;</span><br><span class="line">    //完成了模板的编译  但是还没有挂载到页面</span><br><span class="line">    console.log(&apos;3.挂载之前:beforeMount&apos;)</span><br><span class="line">    console.log(&apos;当前实例的数据data&apos;,this.$data)</span><br><span class="line">    console.log(&apos;当前实例的根元素&apos;,this.$el)</span><br><span class="line">    console.log(&apos;===============&apos;)</span><br><span class="line">&#125;,</span><br><span class="line">mounted()&#123;</span><br><span class="line">    //已经将编译好的模板，挂载到了页面指定的容器中显示</span><br><span class="line">    console.log(&apos;4.已挂载:mounted&apos;)</span><br><span class="line">    console.log(&apos;当前实例的数据data&apos;,this.$data)</span><br><span class="line">    console.log(&apos;当前实例的根元素&apos;,this.$el)</span><br><span class="line">    console.log(&apos;===============&apos;)</span><br><span class="line">&#125;,</span><br><span class="line">beforeUpdate()&#123;</span><br><span class="line">    //状态更新前执行此函数,此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</span><br><span class="line">    console.log(&apos;5.更新之前:beforeUpdate&apos;)</span><br><span class="line">    console.log(&apos;当前实例的数据data&apos;,this.$data)</span><br><span class="line">    console.log(&apos;当前实例的根元素&apos;,this.$el.innerHTML)</span><br><span class="line">    console.log(&apos;===============&apos;)</span><br><span class="line">&#125;,</span><br><span class="line">updated()&#123;</span><br><span class="line">    //实例更新完成之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</span><br><span class="line">    console.log(&apos;6.已更新:Updated&apos;)</span><br><span class="line">    console.log(&apos;当前实例的数据data&apos;,this.$data)</span><br><span class="line">    console.log(&apos;当前实例的根元素&apos;,this.$el.innerHTML)</span><br><span class="line">    console.log(&apos;===============&apos;)</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy()&#123;</span><br><span class="line">    //实例销毁之前调用，这一步实例仍然可用</span><br><span class="line">    console.log(&apos;销毁之前:beforeDestroy&apos;)</span><br><span class="line">    console.log(&apos;当前实例的数据data&apos;,this.$data)</span><br><span class="line">    console.log(&apos;当前实例的根元素&apos;,this.$el)</span><br><span class="line">    console.log(&apos;===============&apos;)</span><br><span class="line">&#125;,</span><br><span class="line">Destroyed()&#123;</span><br><span class="line">    console.log(&apos;销毁之后:Destroyed&apos;)</span><br><span class="line">    console.log(&apos;当前实例的数据data&apos;,this.$data)</span><br><span class="line">    console.log(&apos;当前实例的根元素&apos;,this.$el)</span><br><span class="line">    console.log(&apos;===============&apos;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.定义路由  2.创建路由实例  3.创建和挂载根实例</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 0. 如果使用模块化机制编程，导入Vue和Router，要调用 Vue.use(VueRouter)</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">// 1. 定义 (路由) 组件。</span><br><span class="line">// 可以从其他文件 import 进来</span><br><span class="line">const Foo = &#123; template: &apos;&lt;div&gt;foo&lt;/div&gt;&apos; &#125;</span><br><span class="line">const Bar = &#123; template: &apos;&lt;div&gt;bar&lt;/div&gt;&apos; &#125;</span><br><span class="line"></span><br><span class="line">// 2. 定义路由</span><br><span class="line">// 每个路由应该映射一个组件。 其中&quot;component&quot; 可以是</span><br><span class="line">// 通过 Vue.extend() 创建的组件构造器，</span><br><span class="line">// 或者，只是一个组件配置对象。</span><br><span class="line">const routes = [</span><br><span class="line">  &#123; path: &apos;/foo&apos;, component: Foo &#125;,</span><br><span class="line">  &#123; path: &apos;/bar&apos;, component: Bar &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">// 3. 创建 router 实例，然后传 `routes` 配置</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes // (缩写) 相当于 routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 4. 创建和挂载根实例。</span><br><span class="line">// 记得要通过 router 配置参数注入路由，</span><br><span class="line">// 从而让整个应用都有路由功能</span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(&apos;#app&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">import Home from &apos;./views/Home.vue&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">const router=new Router(&#123;</span><br><span class="line">routes:[</span><br><span class="line">  &#123;</span><br><span class="line">    path:&apos;/&apos;,</span><br><span class="line">    component:Home,</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//动态参数路径，以冒号开头  </span><br><span class="line">  &#123;</span><br><span class="line">    path: &apos;/detail/:id&apos;,</span><br><span class="line">    component: () =&gt; import(&apos;./views/detail/Detail.vue&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">路径:/detail/2</span><br><span class="line">//当匹配到一个路由时，参数值会被设置到 this.$route.params，可以在每个组件内使用</span><br><span class="line">//多段路径参数</span><br><span class="line">path: &apos;/detail/:id/user/:name&apos;,</span><br><span class="line">component: () =&gt; import(&apos;./views/detail/Detail.vue&apos;)</span><br><span class="line">路径：/detail/2/user/jiang</span><br><span class="line">参数值：this.$route.params.id //2   this.$route.params.name // jiang</span><br></pre></td></tr></table></figure><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router-view: 一般都作用是在当前页面进行切换显示</span><br><span class="line">一层路径（/xxx）对应一个router-view</span><br><span class="line">例如：url:/a/b/c</span><br><span class="line">/a:对应的是  app.vue  中的router-view  /a  进入 a.vue中</span><br><span class="line">/a/b：对应的是  a.vue 中的router-view  /a/b 进入b.vue中</span><br><span class="line">//https://blog.csdn.net/luoyu6/article/details/80098145</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">子路由：</span><br><span class="line"></span><br><span class="line">Home页面：</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;router-link to=&quot;/Switch1&quot;&gt;切换1&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;router-link to=&quot;/Switch2&quot;&gt;切换2&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">路由页面：</span><br><span class="line">const router=new Router(&#123;</span><br><span class="line">routes:[</span><br><span class="line">  &#123;</span><br><span class="line">    path:&apos;/&apos;,   //第二个单页面路由指定为/</span><br><span class="line">    component:Home,</span><br><span class="line">    redirect:&apos;/Switch1&apos;,//重定向</span><br><span class="line">    children:[</span><br><span class="line">      &#123;</span><br><span class="line">        path:&apos;Switch1&apos;,</span><br><span class="line">        component:()=&gt;import(&apos;./views/test/Switch1.vue&apos;)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path:&apos;Switch2&apos;,</span><br><span class="line">        component:()=&gt;import(&apos;./views/test/Switch2.vue&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">跳转/detail/id 页面</span><br><span class="line">routes中：</span><br><span class="line">&#123;</span><br><span class="line">    path: &apos;/detail/:id&apos;,</span><br><span class="line">    name:&apos;detail&apos;,</span><br><span class="line">    component: () =&gt; import(&apos;./views/detail/Detail.vue&apos;)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">1. this.$router.push(&#123;</span><br><span class="line">    ` /detail/参数 `</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">2. this.$router.push(&#123;</span><br><span class="line">     name:&apos;detail&apos;,   //提供路由的name</span><br><span class="line">      params:&#123;</span><br><span class="line">        id:id</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">3. &lt;router-link :to=&quot;&#123;name:&apos;detail&apos;,params:&#123;id:1111&#125;&#125;&quot;&gt;&lt;/router-link&gt;</span><br><span class="line">    </span><br><span class="line">4.// 带查询参数，变成 /datail?plan=private</span><br><span class="line">router.push(&#123; </span><br><span class="line">    path: &apos;detail&apos;,</span><br><span class="line">    query: &#123; </span><br><span class="line">    plan: &apos;private&apos; </span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">    </span><br><span class="line">//用params传参 刷新时参数会被清空 query不会</span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1. 使用router-link传递参数</span><br><span class="line"></span><br><span class="line">路由配置：path:&apos;/detail/:num&apos;</span><br><span class="line">父组件中：使用&lt;router-link to=&quot;/需要跳转的路由路径/需要传递的参数&quot;&gt;&lt;/router-link&gt;标签进行导航</span><br><span class="line">子组件中：使用this.$route.params.num 接收</span><br><span class="line"></span><br><span class="line">2. 使用path来匹配路由，然后通过query来传递参数，这种情况下 query传递的参数会显示在url后面?id=？</span><br><span class="line">路由配置：path:&apos;/detail&apos;</span><br><span class="line">父组件:</span><br><span class="line">    this.$router.push(&#123;</span><br><span class="line">        path:&apos;/detail&apos;, </span><br><span class="line">        query:&#123;</span><br><span class="line">          id:2222,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">子组件中:使用this.$route.query.id来接收</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vue&quot;&gt;&lt;a href=&quot;#vue&quot; class=&quot;headerlink&quot; title=&quot;vue&quot;&gt;&lt;/a&gt;vue&lt;/h1&gt;&lt;p&gt;总结了大部分的vue知识点
    
    </summary>
    
    
      <category term="vue知识点" scheme="http://www.jhs1996.cn/categories/vue%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>更新内容</title>
    <link href="http://www.jhs1996.cn/2019/09/24/first/"/>
    <id>http://www.jhs1996.cn/2019/09/24/first/</id>
    <published>2019-09-24T12:52:19.286Z</published>
    <updated>2019-09-26T08:33:31.865Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://www.jhs1996.cn/tags/Vue/"/>
    
      <category term="React" scheme="http://www.jhs1996.cn/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>这是个人博客</title>
    <link href="http://www.jhs1996.cn/2019/09/24/hello-world/"/>
    <id>http://www.jhs1996.cn/2019/09/24/hello-world/</id>
    <published>2019-09-24T07:43:25.530Z</published>
    <updated>2019-09-24T15:48:39.026Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎加入</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎加入&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
